[comment encoding = UTF-8 /]
[module main('/Webshop-Builder-3k/Webshop_Builder_3k_Model.ecore')/]

[template public main(webshop : Webshop_builder_3k)]
	
	[comment @main /]
	[file ('home.html', false, 'UTF-8')]
<html>
	<head>
		<title>[webshop.item_list_page.title/]</title>
		<script src="./plugitems.js" type="text/javascript"></script>
		<link rel=StyleSheet href="webshop.css" type="text/css" media=screen>
	</head>
	<body>
		<div class="content" id="page_1">
		[for (component : Component | webshop.item_list_page.components)]
			[let branding : Branding = component]
				<div class="branding" id="branding_[i/]">
					<h1 class="text">[branding.company_name.text/]</h1>
					<img src="[branding.company_logo.source/]" alt="[branding.company_logo.alternative_text/]"/>
				</div>
			[/let]
			[let text : Text_field = component]
				[if text.header_level > 0]
					<h[text.header_level/] class="text" id="text_[i/]">[text.text/]</h[text.header_level/]>
				[else]
					<p class="text" id="text_[i/]">[text.text/]</p>
				[/if]
			[/let]
		[/for]
		[let results : Result_list = webshop.item_list_page.results]
			<div class="resultlist" id="resultlist">
				<script type="text/javascript">
					populateList();
				</script>
			</div>
		[/let]
		</div>
	</body>
</html>			
	[/file]
	
	[file ('webshop.css', false, 'UTF-8')]
@import url(boilerplate.css);

/* =============================================================================
   Primary styles
   Author: Awesome Ness Awesome
   ========================================================================== */

body { position:absolute; background-color:black; height:100%; width: 100%; }
#page_1 { position:relative; margin-left:auto; margin-right:auto; width:960px; background-color:white; height:100%; }
		[for (component : Component | webshop.item_list_page.components)]
			[let branding : Branding = component]
#branding_[i/] {[css(branding)/]}
#branding_[i/] .text { [css(branding.company_name)/] }
#branding_[i/] img { [css(branding.company_logo)/] }
			[/let]
			[let text : Text_field = component]
#text_[i/] { [css(text)/] }
			[/let]
		[/for]
		[let results : Result_list = webshop.item_list_page.results]
.resultlist { [css(results)/] }
			[let template : Item = results.result_template]
.resultlist .item { position:absolute; left:30px; [size(template)/] [style(template)/] }
.resultlist .item .picture { position:absolute; [position(template.item_picture)/] }
.resultlist .item .price { position:absolute; right:5px; top:5px; }
.resultlist .item .price .value { font-size: 150%; color: #cc0000; }
.resultlist .item .description { position:absolute; left:110px; top:25px; }
.resultlist .item .picture { position:absolute; left:5px; top:25px; }
				[for (text : Text_field | template.text_fields)]
					[if text.text.startsWith('item:') = false]
.item_text_[i/] { [css(text)/] }
					[/if]
				[/for]
			[/let]
		[/let]

h1,h2,h3,h4,h5,p {margin-top: 0; margin-bottom: 0;}

	[/file]

	[file ('plugitems.js', false, 'UTF-8')]
function get(item, tag) {
	return item.getElementsByTagName(tag)['['/]0[']'/].childNodes['['/]0[']'/].nodeValue;
}

function loadXMLDoc(dname) {
	var xhttp = false;
	try {
		xhttp = new XMLHttpRequest();
	} catch (e) {
		xhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}
	xhttp.open("GET", dname, false);
	xhttp.send();
	return xhttp.responseXML;
}

function populateList() {
	var xmlDoc = loadXMLDoc("./items.xml");
	var items = xmlDoc.getElementsByTagName("item");
	for (var i = 0; i < items.length; i++) {
		var text = document.getElementById("resultlist").innerHTML;
 		text = text.concat("<div class=\"item\" id=\"item_" + i + "\" style=\"top:" + i * 135 + "px;\">");

		var item = items['['/]i[']'/];
		var name = get(item, "name");
		var price = get(item, "price");
		var picture = get(item, "picture");
		var description = get(item, "description");
		
		
		
		text = text.concat("	<h3 class=\"title\">" + name + "</h3>");
		text = text.concat("	<p class=\"price\">Price: <span class=\"value\">" + price + "</span></p>");
		text = text.concat("	<img class=\"picture\" width=\"100px\" height=\"100px\" src=\"" + picture + "\"/>");
		text = text.concat("	<p class=\"description\">" + description + "</p>");
		text = text.concat("</div>");
		document.getElementById("resultlist").innerHTML = text;
	}
}
	[/file]
[/template]

[template public css(component : Component) post (trim())]
[size(component)/] [position(component)/] [style(component)/]
[/template]

[template public size(component : Component) post (trim())]
[if (component.width > 0)]
width: [component.width/]px;
[/if]
[if (component.height > 0)]
height: [component.height/]px;
[/if]
[/template]

[template public style(component : Component) ? (component.style.oclIsUndefined() = false) post (trim())]
	[if (component.style.background_color.oclIsUndefined() = false)]
background-color: [component.style.background_color/];
	[/if]
	[if (component.style.border.oclIsUndefined() = false)]
		[let border : Border = component.style.border]
border: solid [border.color/] [border.thickness/]px;
		[/let]
	[/if]
[/template]

[template public position(component : Component) ? (component.xposition <> 0 or component.yposition <> 0) post (trim())]
position: absolute;
	[if (component.xposition <> 0)]
		[if (component.alignment.toString() = 'left')]
	left: [component.xposition/]px;
		[else]
	right: [component.xposition/]px;	
		[/if]
	[/if]
	[if (component.yposition <> 0)]
	top: [component.yposition/]px;
	[/if]
[/template]